{"version":3,"sources":["Components/MaterialUI/Buttons.js","Components/re-use/Virtualization.js","constant.js","Layouts/Header.jsx","Layouts/Footer.jsx","Components/re-use/Button.js","Components/App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","button","margin","spacing","unit","input","display","props","classes","react_default","a","createElement","Button_default","variant","className","color","disabled","href","accept","id","multiple","type","htmlFor","component","rowCount","jsonData","path","App","name","Buttons","Virtualization","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderRow","_ref","index","key","style","react","src","list","image","alt","text","Array","fill","map","val","idx","loremIpsum","count","units","sentenceLowerBound","sentenceUpperBound","es","width","height","rowHeight","rowRenderer","length","React","Header","Component","Footer","Button","handleButtonClick","e","target","value","btnIcon","btnId","onClick","gotoRoute","routePath","history","push","_this2","routes","data","Route","exact","Header_Header","re_use_Button","Switch","Footer_Footer","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bb92413.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n});\r\n\r\nfunction ContainedButtons(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" className={classes.button}>\r\n        Default\r\n      </Button>\r\n      <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n        Primary\r\n      </Button>\r\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n        Secondary\r\n      </Button>\r\n      <Button variant=\"contained\" color=\"secondary\" disabled className={classes.button}>\r\n        Disabled\r\n      </Button>\r\n      <Button variant=\"contained\" href=\"#contained-buttons\" className={classes.button}>\r\n        Link\r\n      </Button>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"contained-button-file\"\r\n        multiple\r\n        type=\"file\"\r\n      />\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Button variant=\"contained\" component=\"span\" className={classes.button}>\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nContainedButtons.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ContainedButtons);","import * as React from 'react';\r\nimport { List } from \"react-virtualized\";\r\nimport loremIpsum from 'lorem-ipsum';\r\nconst rowCount = 1000;\r\nexport default class Virtualization extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.list = Array(rowCount).fill().map((val, idx) => {\r\n      return {\r\n        id: idx,\r\n        name: 'John Doe',\r\n        image: 'http://via.placeholder.com/40',\r\n        text: loremIpsum({\r\n          count: 1,\r\n          units: 'sentences',\r\n          sentenceLowerBound: 4,\r\n          sentenceUpperBound: 8\r\n        })\r\n      }\r\n    });\r\n  }\r\n  // renderRow = (item) => {\r\n  //   return (\r\n  //     <div key={item.id} className=\"row\">\r\n  //       <div className=\"image\">\r\n  //         <img src={item.image} alt=\"\" />\r\n  //       </div>\r\n  //       <div className=\"content\">\r\n  //         <div>{item.name}</div>\r\n  //         <div>{item.text}</div>\r\n  //       </div>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  renderRow = ({ index, key, style }) => {\r\n    return (\r\n      <div key={key} style={style} className=\"row\">\r\n        <div className=\"image\">\r\n          <img src={this.list[index].image} alt=\"\" />\r\n        </div>\r\n        <div className=\"content\">\r\n          <div>{this.list[index].name}</div>\r\n          <div>{this.list[index].text}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const listHeight = 600;\r\n    const rowHeight = 50;\r\n    const rowWidth = 800;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"newList\">\r\n          <List\r\n            width={rowWidth}\r\n            height={listHeight}\r\n            rowHeight={rowHeight}\r\n            rowRenderer={this.renderRow}\r\n            rowCount={this.list.length} /></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import App from './Components/App';\r\nimport Buttons from './Components/MaterialUI/Buttons';\r\nimport virtualComponent from './Components/re-use/Virtualization';\r\n\r\nexport const jsonData = [\r\n  { path: \"/\", component: App, name: \"APP\" },\r\n  { path: \"/Buttons\", component: Buttons, name: \"Buttons\" },\r\n  { path: \"/VirtualizedList\", component: virtualComponent, name: \"virtualList\" }\r\n]\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Header</h1>     \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <h1>Footer</h1>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\r\n\r\nclass Button extends React.Component{\r\n  handleButtonClick = (e) => {\r\n\r\n    this.props.handleButtonClick(e.target.value);\r\n    // this.props.handleButtonClick(e.target.name);\r\n  };\r\n\r\n  render() {\r\n    const btnIcon = this.props.val;\r\n    const btnId = this.props.key;\r\n    return (\r\n      <div className=\"btn-component\">\r\n        <input type=\"button\" onClick={this.handleButtonClick} key={btnId} value={btnIcon} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n};\r\nexport default Button;","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport { jsonData } from '../constant';\nimport './../App.css';\nimport Header from '../Layouts/Header';\nimport Footer from '../Layouts/Footer';\nimport Button from './re-use/Button';\nclass App extends Component {\n  gotoRoute = (routePath) => {\n    this.props.history.push(routePath);\n  }\n  render() {\n    const routes = (\n      jsonData.map((data, index) => {\n        return (<Route key={index} path={data.path} exact component={data.component} />\n        );\n      })\n    );\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"btn-routes\">\n          {\n            jsonData.map((data, index) => {\n              return (\n                <Button handleButtonClick={() => this.gotoRoute(data.path)} val={data.name} key={index} />\n              );\n            })\n          }\n        </div>\n        <Switch>\n          {\n            routes\n          }\n        </Switch>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}